#!/bin/bash

# The following is courtesy of the Stack Overflow Community
# https://stackoverflow.com/a/4774063
WORKDIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
WORKDIR=$(dirname ${WORKDIR})
TESTDIR="/tmp/gravitysynctest"
set -e

# Get the current version. This is not neccesary to the testing process itself but we cannot build without it
VERSION=$(cat ${WORKDIR}/Dockerfile | grep GS_VERSION= | cut -d '"' -f2)

# Build a single platform image
echo "Building Image"
${WORKDIR}/dev_scripts/cibuild --platform linux/amd64 --version ${VERSION}

# Clean up testing environment (In case we previously failed testing)
docker-compose -f ${WORKDIR}/docker-testenvironment-compose.yml down --remove-orphans
if ! $(rm -rf ${TESTDIR} > /dev/null 2>&1);
then
    echo "Need root priveleges to reset testing directory"
    sudo rm -rf ${TESTDIR}
fi

# Create the testing volume directory and temporary SSH keys
mkdir -p ${TESTDIR}/.ssh/
docker run -v "$TESTDIR/:$TESTDIR/.ssh:rw" --rm alpine:latest apk --update add openssh-client && ssh-keygen -q -t rsa -f ${TESTDIR}/.ssh/id_rsa -N ''

# Bring the testing environment online
docker-compose -f ${WORKDIR}/docker-testenvironment-compose.yml up -d
docker container ls -a --format "table {{.ID}}\t{{.Image}}\t{{.Names}}"

echo "Prepare the SSH container to accommodate for GravitySync's requirements"
docker exec ssh sh -c 'chmod +w /etc/sudoers && sudo sed -i "s/^gravitysync.*$/gravitysync ALL=(ALL) NOPASSWD: ALL/" /etc/sudoers'
docker exec ssh apk add sqlite rsync docker

#For some reason, gravitysynctest wants to restart now so we will have to wait for it
wait=30
echo "Waiting for gravitysynctest to restart"
until [ docker container ls --format "table {{.Names}}\t{{.Status}}" | grep gravitysynctest | grep Up ]
do
  sleep 1
  wait=$[$wait-1]
  if [ $wait -eq 0 ]
  then
    echo "Timed out while awaiting gravitysynctest restart"
    exit 1
  fi
done

echo "Add the SSH container's host key to the GravitySync container's local store"
docker exec gravitysynctest ssh -o BatchMode=yes -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa -p 2222 gravitysync@172.31.255.2 exit 0

echo "cat /test"
docker exec gravitysynctest cat /test

echo 'Insert a new custom DNS record in the "primary" pihole and test it'
docker exec pihole1 sh -c 'echo "127.0.0.1 dnstest.local" > /etc/pihole/custom.list'
docker exec pihole1 /usr/local/bin/pihole restartdns
echo 'Waiting 10 seconds after PiHole DNS restart'
sleep 10
host -t A dnstest.local 172.31.255.3

# Run the sync to the "secondary" pihole and test it
docker exec gravitysynctest /root/gravity-sync/gravity-sync.sh pull
host -t A dnstest.local 172.31.255.4

# Clean up the testing environment
docker-compose -f ${WORKDIR}/docker-testenvironment-compose.yml down --remove-orphans
if ! $(rm -rf ${TESTDIR} > /dev/null 2>&1);
then
    sudo rm -rf ${TESTDIR}
fi

echo "The test has succeeded"
